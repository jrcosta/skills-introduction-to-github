---
name: Deploy to GitHub Pages

# Executa o workflow quando há push na branch main ou master
"on":
  push:
    branches: ["main", "master"]
  pull_request:
    branches: ["main", "master"]

  # Permite executar este workflow manualmente na aba Actions
  workflow_dispatch:

# Define permissões para o GITHUB_TOKEN
permissions:
  contents: read
  pages: write
  id-token: write

# Permite apenas um deploy concorrente, cancelando execuções em andamento
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Job de build
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Build website
        run: |
          echo "🚀 Iniciando build do website..."
          echo "📁 Listando arquivos do projeto:"
          ls -la
          echo "✅ Build concluído com sucesso!"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

  # Job de deploy
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages

  # Job adicional para demonstrar conceitos do GitHub Actions
  demo:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Demonstrar variáveis de ambiente
        run: |
          echo "🔍 Informações do GitHub Actions:"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"
          echo "Event: ${{ github.event_name }}"

      - name: Verificar arquivos do projeto
        run: |
          echo "📋 Estrutura do projeto:"
          find . -type f -not -path './.git/*' | sort

      - name: Simular testes
        run: |
          echo "🧪 Executando verificações..."

          # Verificar se index.html existe
          if [ -f "index.html" ]; then
            echo "✅ index.html encontrado"
          else
            echo "❌ index.html não encontrado"
            exit 1
          fi

          # Verificar se styles.css existe
          if [ -f "styles.css" ]; then
            echo "✅ styles.css encontrado"
          else
            echo "❌ styles.css não encontrado"
            exit 1
          fi

          # Verificar se script.js existe
          if [ -f "script.js" ]; then
            echo "✅ script.js encontrado"
          else
            echo "❌ script.js não encontrado"
            exit 1
          fi

          echo "🎉 Todas as verificações passaram!"

      - name: Contar linhas de código
        run: |
          echo "📊 Estatísticas do projeto:"
          echo "Linhas de HTML: $(wc -l < index.html)"
          echo "Linhas de CSS: $(wc -l < styles.css)"
          echo "Linhas de JavaScript: $(wc -l < script.js)"
          total_files=$(find . -type f -not -path './.git/*' | wc -l)
          echo "Total de arquivos: $total_files"